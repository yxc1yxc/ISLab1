# This is a basic workflow to help you get started with Actions

name: gradingWorkflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build-and-test:
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      
      - uses: actions/checkout@v3

      - name: check grading files
        uses: actions/checkout@v3
        with:
          repository: yxc1yxc/gradingFiles
          token: ${{ secrets.WARNING }}
          path: grading
      

      
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.9

      - name: Create Build Environment
        run: cmake -B build

      - name: Build
        run: cmake --build build --config Release

      - name: List files
        run: dir

      - name: List
        run: Get-ChildItem -Path .\grading\
            

      - name: Run with proper input
        run: .\build\Release\*.exe .\grading\input_file.txt > student_output.txt 

        
      

      - name: Compare outputs
        run: fc student_output.txt .\grading\solution_output.txt
        shell: cmd


      - name: Run with bad input
        id: bad_input_check
        run: |
          try {
              .\lab1.exe gkaygakydfla
              Write-Output "Im here"
              if ($LASTEXITCODE -eq 0) {
                  Write-Output "Program should have failed for bad input!"
                  echo "MY_EXIT_CODE=2" >> $GITHUB_ENV
                  exit 2
              }
          } catch {
              Write-Output "Program crashed or encountered an exception!"
              echo "MY_EXIT_CODE=3" >> $GITHUB_ENV
              exit 3
          }
        continue-on-error: true


      - name: Check exit code from previous step
        run: |
          if ("${{ env.MY_EXIT_CODE }}" -eq "2") {
            Write-Output "Program should have failed for bad input!"
            exit 1
          }
          elseif ("${{ env.MY_EXIT_CODE }}" -eq "3") {
            Write-Output "Program crashed or encountered an exception!"
            exit 1
          }





